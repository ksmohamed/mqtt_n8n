{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -848,
        128
      ],
      "id": "6334c82e-9f7c-4d93-b0ea-d0f1e3d0f19a",
      "name": "When chat message received",
      "webhookId": "e90d4a86-6c0e-459c-8e5b-3694b189fd5c"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "87740901-24d2-4ec8-87b1-d636435f1d47",
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": "light",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -448,
        288
      ],
      "id": "9c8b4d17-1a48-41d7-8432-430f2b85d892",
      "name": "If"
    },
    {
      "parameters": {
        "topic": "smartpass/to-device/9C9E6E0738A8",
        "options": {}
      },
      "type": "n8n-nodes-base.mqtt",
      "typeVersion": 1,
      "position": [
        -32,
        544
      ],
      "id": "f61e1154-e2a4-42d5-ac4e-09a0840ad56a",
      "name": "MQTT",
      "credentials": {
        "mqtt": {
          "id": "hTCN1eN4rmWkJtkE",
          "name": "MQTT account"
        }
      }
    },
    {
      "parameters": {
        "topics": "smartpass/from-device/9C9E6E0738A8",
        "options": {}
      },
      "type": "n8n-nodes-base.mqttTrigger",
      "typeVersion": 1,
      "position": [
        -448,
        0
      ],
      "id": "ad3e2691-4b3d-4cfb-8ac8-01b9575073d8",
      "name": "MQTT Trigger",
      "credentials": {
        "mqtt": {
          "id": "hTCN1eN4rmWkJtkE",
          "name": "MQTT account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "=7603498943",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        944,
        272
      ],
      "id": "e3146da7-15a1-446f-8343-0f8016ab047a",
      "name": "Send a text message",
      "webhookId": "91429e1d-bbbe-4fbd-bbe4-8f4b2141669f",
      "credentials": {
        "telegramApi": {
          "id": "YRcQSDQZUZCw8LOk",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1. Parse the raw sensor message from chat\nconst rawMessage = $json.message || \"{}\";\n\nlet data;\ntry {\n  data = JSON.parse(rawMessage);\n} catch (e) {\n  return [\n    {\n      json: {\n        message: \"‚ùå Invalid sensor data format. Please send valid JSON.\"\n      }\n    }\n  ];\n}\n\n// 2. Extract MAC ID from topic (if available)\nconst topic = $json.topic || \"\";\nconst macMatch = topic.match(/from-device\\/([A-F0-9]+)/i);\nconst mac_id = macMatch ? macMatch[1] : \"UNKNOWN_MAC\";\n\n// 3. Round the values\nconst temperature = parseFloat(data.temperature || 0).toFixed(2);\nconst humidity = parseFloat(data.humidity || 0).toFixed(2);\n\n// 4. Compose the chat message\nconst chatMessage = `üì° Device ${mac_id} reports:\\nüå°Ô∏è Temperature: ${temperature}¬∞C\\nüíß Humidity: ${humidity}%`;\n\nreturn [\n  {\n    json: {\n      chatid: 7603498943,\n      message: chatMessage\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        0
      ],
      "id": "31b84f19-66f3-4a42-8c9d-bbd943da2af2",
      "name": "MQTT Response"
    },
    {
      "parameters": {
        "jsCode": "const inputText = $json.chatInput || \"\";\n\nlet status = \"\";\nlet name = \"\";\n\n// Normalize text\nconst lowerText = inputText.toLowerCase();\n\n// Determine status\nif (lowerText.includes(\"turn on\")) {\n  status = \"ON\";\n} else if (lowerText.includes(\"turn off\")) {\n  status = \"OFF\";\n}\n\n// Remove command part to extract device name\nname = inputText.replace(/turn (on|off)/i, \"\").trim();\n\n// Fix common typos (optional)\nname = name.replace(/lifgt/i, \"light\");\n\n// Capitalize each word in name\nname = name\n  .split(\" \")\n  .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n  .join(\" \");\n\n// Return JSON\n\nreturn [\n  {\n    json: {\n      chatid: 7603498943,\n      message: `The ${name} is ${status}`\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        272
      ],
      "id": "8c1d6e48-bccd-40bf-98f0-609922d1c325",
      "name": "Turn on Status"
    },
    {
      "parameters": {
        "jsCode": "const inputText = $json.chatInput || \"\";\nconst lowerText = inputText.toLowerCase();\n\n// Define MAC address (replace with real MAC or pull from another field)\nconst mac = \"9C9E6E0738A8\";\n\n// Default states\nlet relay1 = \"OFF\";\nlet relay2 = \"OFF\";\n\n// ON command triggers\nconst isOnCommand = /(turn|set|switch|open|activate|enable)/.test(lowerText);\n\n// OFF command triggers (optional)\nconst isOffCommand = /(turn|set|switch|close|deactivate|disable).*(off)/.test(lowerText);\n\n// Detect specific relay mentions\nconst mentionsRelay1 = /relay1|first/.test(lowerText);\nconst mentionsRelay2 = /relay2|second/.test(lowerText);\nconst mentionsBoth = /2 relay|both relays|both/.test(lowerText);\n\n// Apply logic\nif (isOnCommand) {\n  if (mentionsBoth || (!mentionsRelay1 && !mentionsRelay2)) {\n    // No specific relay mentioned ‚Üí default to both ON\n    relay1 = \"ON\";\n    relay2 = \"ON\";\n  } else {\n    if (mentionsRelay1) relay1 = \"ON\";\n    if (mentionsRelay2) relay2 = \"ON\";\n  }\n} else if (isOffCommand) {\n  if (mentionsBoth || (!mentionsRelay1 && !mentionsRelay2)) {\n    relay1 = \"OFF\";\n    relay2 = \"OFF\";\n  } else {\n    if (mentionsRelay1) relay1 = \"OFF\";\n    if (mentionsRelay2) relay2 = \"OFF\";\n  }\n}\n\n// Final payload\nconst payload = {\n  message_id: `${Date.now()}`,\n  message_type: \"device_control\",\n  mac_id: mac,\n  relay1: relay1,\n  relay2: relay2\n};\n\nreturn [\n  {\n    json: payload\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        544
      ],
      "id": "edb86bf2-f7f1-4539-a19a-6b4025e87dd3",
      "name": "Door"
    },
    {
      "parameters": {
        "jsCode": "// Get relay state from input\nconst relay1 = $json.relay1 || \"OFF\";\nconst mac_id = $json.mac_id || \"UNKNOWN\";\n\n// Interpret relay state\nlet doorStatus = \"\";\n\nif (relay1 === \"ON\") {\n  doorStatus = \"üö™ Door is open\";\n} else if (relay1 === \"OFF\") {\n  doorStatus = \"üîí Door is closed\";\n} else {\n  doorStatus = \"‚ùì Door state unknown\";\n}\n\n// Optionally include device info\nconst message = `Device ${mac_id} status:\\n${doorStatus}`;\n\nreturn [\n  {\n    json: {\n      chatid: 7603498943,\n      message: message\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        544
      ],
      "id": "a1dd3a36-12e3-48f5-836c-9f0dfa81c8c0",
      "name": "Door Response"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "6b8825c2-939c-46d4-8a77-59e460521d03",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -848,
        448
      ],
      "id": "4230c942-239a-47f3-9325-5b5029686e7b",
      "name": "Webhook",
      "webhookId": "6b8825c2-939c-46d4-8a77-59e460521d03"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a smart home assistant. Rewrite this technical message for a non-technical user:\n\"{{$json.message}}\"",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        560,
        272
      ],
      "id": "84795472-ad5e-4767-8df2-0b22baf5c95c",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        560,
        480
      ],
      "id": "237eb85e-3d7c-4697-a95b-ac57418e16c1",
      "name": "Azure OpenAI Chat Model",
      "credentials": {
        "azureOpenAiApi": {
          "id": "95sfo0sFC9B5UjhA",
          "name": "Azure Open AI account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "7603498943"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        688,
        480
      ],
      "id": "28c863c9-2a73-4945-8fc5-c4f9e05956a8",
      "name": "Simple Memory"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Turn on Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Door",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MQTT Trigger": {
      "main": [
        [
          {
            "node": "MQTT Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MQTT": {
      "main": [
        [
          {
            "node": "Door Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MQTT Response": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn on Status": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Door": {
      "main": [
        [
          {
            "node": "MQTT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Door Response": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        []
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3c5c6f92-c92a-48be-9ced-1b603b9121f9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5704f9fa0792b5a77941ad71ddc175ff84a7cc9a1efc4dc7280bfb034439d2ea"
  },
  "id": "vsgbPFDTVuaYjvUt",
  "tags": []
}